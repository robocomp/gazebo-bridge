// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: JoystickAdapter.proto

#ifndef PROTOBUF_INCLUDED_JoystickAdapter_2eproto
#define PROTOBUF_INCLUDED_JoystickAdapter_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_JoystickAdapter_2eproto 

namespace protobuf_JoystickAdapter_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_JoystickAdapter_2eproto
class AxisParams;
class AxisParamsDefaultTypeInternal;
extern AxisParamsDefaultTypeInternal _AxisParams_default_instance_;
class ButtonParams;
class ButtonParamsDefaultTypeInternal;
extern ButtonParamsDefaultTypeInternal _ButtonParams_default_instance_;
class TData;
class TDataDefaultTypeInternal;
extern TDataDefaultTypeInternal _TData_default_instance_;
namespace google {
namespace protobuf {
template<> ::AxisParams* Arena::CreateMaybeMessage<::AxisParams>(Arena*);
template<> ::ButtonParams* Arena::CreateMaybeMessage<::ButtonParams>(Arena*);
template<> ::TData* Arena::CreateMaybeMessage<::TData>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class TData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TData) */ {
 public:
  TData();
  virtual ~TData();

  TData(const TData& from);

  inline TData& operator=(const TData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TData(TData&& from) noexcept
    : TData() {
    *this = ::std::move(from);
  }

  inline TData& operator=(TData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TData* internal_default_instance() {
    return reinterpret_cast<const TData*>(
               &_TData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TData* other);
  friend void swap(TData& a, TData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TData* New() const final {
    return CreateMaybeMessage<TData>(NULL);
  }

  TData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TData& from);
  void MergeFrom(const TData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AxisParams axes = 2;
  int axes_size() const;
  void clear_axes();
  static const int kAxesFieldNumber = 2;
  ::AxisParams* mutable_axes(int index);
  ::google::protobuf::RepeatedPtrField< ::AxisParams >*
      mutable_axes();
  const ::AxisParams& axes(int index) const;
  ::AxisParams* add_axes();
  const ::google::protobuf::RepeatedPtrField< ::AxisParams >&
      axes() const;

  // repeated .ButtonParams buttons = 3;
  int buttons_size() const;
  void clear_buttons();
  static const int kButtonsFieldNumber = 3;
  ::ButtonParams* mutable_buttons(int index);
  ::google::protobuf::RepeatedPtrField< ::ButtonParams >*
      mutable_buttons();
  const ::ButtonParams& buttons(int index) const;
  ::ButtonParams* add_buttons();
  const ::google::protobuf::RepeatedPtrField< ::ButtonParams >&
      buttons() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:TData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::AxisParams > axes_;
  ::google::protobuf::RepeatedPtrField< ::ButtonParams > buttons_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_JoystickAdapter_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AxisParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AxisParams) */ {
 public:
  AxisParams();
  virtual ~AxisParams();

  AxisParams(const AxisParams& from);

  inline AxisParams& operator=(const AxisParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AxisParams(AxisParams&& from) noexcept
    : AxisParams() {
    *this = ::std::move(from);
  }

  inline AxisParams& operator=(AxisParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AxisParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AxisParams* internal_default_instance() {
    return reinterpret_cast<const AxisParams*>(
               &_AxisParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AxisParams* other);
  friend void swap(AxisParams& a, AxisParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AxisParams* New() const final {
    return CreateMaybeMessage<AxisParams>(NULL);
  }

  AxisParams* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AxisParams>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AxisParams& from);
  void MergeFrom(const AxisParams& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AxisParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // float value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  float value() const;
  void set_value(float value);

  // @@protoc_insertion_point(class_scope:AxisParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  float value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_JoystickAdapter_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ButtonParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ButtonParams) */ {
 public:
  ButtonParams();
  virtual ~ButtonParams();

  ButtonParams(const ButtonParams& from);

  inline ButtonParams& operator=(const ButtonParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ButtonParams(ButtonParams&& from) noexcept
    : ButtonParams() {
    *this = ::std::move(from);
  }

  inline ButtonParams& operator=(ButtonParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ButtonParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ButtonParams* internal_default_instance() {
    return reinterpret_cast<const ButtonParams*>(
               &_ButtonParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ButtonParams* other);
  friend void swap(ButtonParams& a, ButtonParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ButtonParams* New() const final {
    return CreateMaybeMessage<ButtonParams>(NULL);
  }

  ButtonParams* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ButtonParams>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ButtonParams& from);
  void MergeFrom(const ButtonParams& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ButtonParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 step = 2;
  void clear_step();
  static const int kStepFieldNumber = 2;
  ::google::protobuf::int32 step() const;
  void set_step(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ButtonParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 step_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_JoystickAdapter_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TData

// string id = 1;
inline void TData::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TData::id() const {
  // @@protoc_insertion_point(field_get:TData.id)
  return id_.GetNoArena();
}
inline void TData::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TData.id)
}
#if LANG_CXX11
inline void TData::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TData.id)
}
#endif
inline void TData::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TData.id)
}
inline void TData::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TData.id)
}
inline ::std::string* TData::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:TData.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TData::release_id() {
  // @@protoc_insertion_point(field_release:TData.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TData::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:TData.id)
}

// repeated .AxisParams axes = 2;
inline int TData::axes_size() const {
  return axes_.size();
}
inline void TData::clear_axes() {
  axes_.Clear();
}
inline ::AxisParams* TData::mutable_axes(int index) {
  // @@protoc_insertion_point(field_mutable:TData.axes)
  return axes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AxisParams >*
TData::mutable_axes() {
  // @@protoc_insertion_point(field_mutable_list:TData.axes)
  return &axes_;
}
inline const ::AxisParams& TData::axes(int index) const {
  // @@protoc_insertion_point(field_get:TData.axes)
  return axes_.Get(index);
}
inline ::AxisParams* TData::add_axes() {
  // @@protoc_insertion_point(field_add:TData.axes)
  return axes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AxisParams >&
TData::axes() const {
  // @@protoc_insertion_point(field_list:TData.axes)
  return axes_;
}

// repeated .ButtonParams buttons = 3;
inline int TData::buttons_size() const {
  return buttons_.size();
}
inline void TData::clear_buttons() {
  buttons_.Clear();
}
inline ::ButtonParams* TData::mutable_buttons(int index) {
  // @@protoc_insertion_point(field_mutable:TData.buttons)
  return buttons_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ButtonParams >*
TData::mutable_buttons() {
  // @@protoc_insertion_point(field_mutable_list:TData.buttons)
  return &buttons_;
}
inline const ::ButtonParams& TData::buttons(int index) const {
  // @@protoc_insertion_point(field_get:TData.buttons)
  return buttons_.Get(index);
}
inline ::ButtonParams* TData::add_buttons() {
  // @@protoc_insertion_point(field_add:TData.buttons)
  return buttons_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ButtonParams >&
TData::buttons() const {
  // @@protoc_insertion_point(field_list:TData.buttons)
  return buttons_;
}

// -------------------------------------------------------------------

// AxisParams

// string name = 1;
inline void AxisParams::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AxisParams::name() const {
  // @@protoc_insertion_point(field_get:AxisParams.name)
  return name_.GetNoArena();
}
inline void AxisParams::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AxisParams.name)
}
#if LANG_CXX11
inline void AxisParams::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AxisParams.name)
}
#endif
inline void AxisParams::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AxisParams.name)
}
inline void AxisParams::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AxisParams.name)
}
inline ::std::string* AxisParams::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:AxisParams.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AxisParams::release_name() {
  // @@protoc_insertion_point(field_release:AxisParams.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AxisParams::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:AxisParams.name)
}

// float value = 2;
inline void AxisParams::clear_value() {
  value_ = 0;
}
inline float AxisParams::value() const {
  // @@protoc_insertion_point(field_get:AxisParams.value)
  return value_;
}
inline void AxisParams::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:AxisParams.value)
}

// -------------------------------------------------------------------

// ButtonParams

// string name = 1;
inline void ButtonParams::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ButtonParams::name() const {
  // @@protoc_insertion_point(field_get:ButtonParams.name)
  return name_.GetNoArena();
}
inline void ButtonParams::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ButtonParams.name)
}
#if LANG_CXX11
inline void ButtonParams::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ButtonParams.name)
}
#endif
inline void ButtonParams::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ButtonParams.name)
}
inline void ButtonParams::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ButtonParams.name)
}
inline ::std::string* ButtonParams::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ButtonParams.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ButtonParams::release_name() {
  // @@protoc_insertion_point(field_release:ButtonParams.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ButtonParams::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ButtonParams.name)
}

// int32 step = 2;
inline void ButtonParams::clear_step() {
  step_ = 0;
}
inline ::google::protobuf::int32 ButtonParams::step() const {
  // @@protoc_insertion_point(field_get:ButtonParams.step)
  return step_;
}
inline void ButtonParams::set_step(::google::protobuf::int32 value) {
  
  step_ = value;
  // @@protoc_insertion_point(field_set:ButtonParams.step)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_JoystickAdapter_2eproto
